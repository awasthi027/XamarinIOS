{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red93\green108\blue121;\red255\green255\blue255;\red0\green0\blue0;
\red196\green26\blue22;\red155\green35\blue147;\red47\green255\blue18;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;
\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c60759\c13753\c57628;\cssrgb\c15686\c99608\c7843;\csgray\c0\c90000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww22780\viewh9000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 How to sync iOS objective-c .a file to xamarin app. \
\
/*==================================================================================*/\
\

\fs48 iOS Library
\fs24 \
\
Step first 1. Create iOS static library\
\
1. File-> New Project -> static library\
2. Add functionality \
3. Create Universal library\
\
  a.  Add new target \
    1. File-> New target->Cross-Platform-.Aggregate\
    2. Add script to create universal library\
     Select Universal target -> Build Phases-> Add script\
\
\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2 \cb3 # Type a script or drag a script file from yo######################\cf4 \
\cf2 # Options\cf4 \
\cf2 ######################\cf4 \
\
REVEAL_ARCHIVE_IN_FINDER=false\
\
FRAMEWORK_NAME=\cf5 "\cf4 $\{PROJECT_NAME\}\cf5 "\cf4 \
\
SIMULATOR_LIBRARY_PATH=\cf5 "\cf4 $\{BUILD_DIR\}\cf5 /\cf4 $\{CONFIGURATION\}\cf5 -iphonesimulator"\cf4 \
\
DEVICE_LIBRARY_PATH=\cf5 "\cf4 $\{BUILD_DIR\}\cf5 /\cf4 $\{CONFIGURATION\}\cf5 -iphoneos"\cf4 \
\
UNIVERSAL_LIBRARY_DIR=\cf5 "Universal"\cf4 \
\
FRAMEWORK=\cf5 "\cf4 $\{UNIVERSAL_LIBRARY_DIR\}\cf5 "\cf4 \
\
\
\cf2 ######################\cf4 \
\cf2 # Build Frameworks\cf4 \
\cf2 ######################\cf4 \
\cf2 #xcodebuild clean build CONFIGURATION_BUILD_DIR="$\{BUILD_DIR\}/$\{CONFIGURATION\}-iphoneos" -scheme "$\{PROJECT_NAME\}" -sdk iphonesimulator -configuration \{CONFIGURATION\} OBJROOT="$\{OBJROOT\}/DependentBuilds"\cf4 \
\cf2 #xcodebuild clean build CONFIGURATION_BUILD_DIR="$\{BUILD_DIR\}/$\{CONFIGURATION\}-iphonesimulator" -scheme "$\{PROJECT_NAME\}" -sdk iphoneos -configuration $\{CONFIGURATION\} OBJROOT="$\{OBJROOT\}/DependentBuilds"\cf4 \
\
xcodebuild -target \cf5 "\cf4 $\{PROJECT_NAME\}\cf5 "\cf4  -scheme \cf5 "\cf4 $\{PROJECT_NAME\}\cf5 "\cf4  -sdk iphonesimulator -configuration $\{CONFIGURATION\} OBJROOT=\cf5 "\cf4 $\{OBJROOT\}\cf5 /DependentBuilds"\cf4 \
\
xcodebuild -target \cf5 "\cf4 $\{PROJECT_NAME\}\cf5 "\cf4  -scheme \cf5 "\cf4 $\{PROJECT_NAME\}\cf5 "\cf4  -sdk iphoneos -configuration $\{CONFIGURATION\}  OBJROOT=\cf5 "\cf4 $\{OBJROOT\}\cf5 /DependentBuilds"\cf4 \
\
\cf2 ######################\cf4 \
\cf2 # Create directory for universal\cf4 \
\cf2 ######################\cf4 \
\
rm -rf \cf5 "\cf4 $\{UNIVERSAL_LIBRARY_DIR\}\cf5 "\cf4 \
\
\cf2 #mkdir "$\{UNIVERSAL_LIBRARY_DIR\}"\cf4 \
\

\f2\b \cf6 if
\f1\b0 \cf4  [ ! -d \cf5 "\cf4 $\{UNIVERSAL_LIBRARY_DIR\}\cf5 "\cf4  ]; 
\f2\b \cf6 then
\f1\b0 \cf4 \
mkdir \cf5 "\cf4 $\{UNIVERSAL_LIBRARY_DIR\}\cf5 "\cf4 \
\cf2 # Control will enter here if $DIRECTORY doesn't exist.\cf4 \

\f2\b \cf6 fi
\f1\b0 \cf4 \
\cf2 #mkdir "$\{FRAMEWORK\}"\cf4 \

\f2\b \cf6 if
\f1\b0 \cf4  [ ! -d \cf5 "\cf4 $\{FRAMEWORK\}\cf5 "\cf4  ]; 
\f2\b \cf6 then
\f1\b0 \cf4 \
mkdir \cf5 "\cf4 $\{FRAMEWORK\}\cf5 "\cf4 \
\cf2 # Control will enter here if $DIRECTORY doesn't exist.\cf4 \

\f2\b \cf6 fi
\f1\b0 \cf4 \
\
\cf2 ######################\cf4 \
\cf2 # Copy files Framework\cf4 \
\cf2 ######################\cf4 \
\
\cf2 #cp -r "$\{DEVICE_LIBRARY_PATH\}/." "$\{FRAMEWORK\}"\cf4 \
\
\
\cf2 ######################\cf4 \
\cf2 # Make an universal binary\cf4 \
\cf2 ######################\cf4 \
\
lipo \cf5 "\cf4 $\{SIMULATOR_LIBRARY_PATH\}\cf5 /lib\cf4 $\{FRAMEWORK_NAME\}\cf5 .a"\cf4  \cf5 "\cf4 $\{DEVICE_LIBRARY_PATH\}\cf5 /lib\cf4 $\{FRAMEWORK_NAME\}\cf5 .a"\cf4  -create -output \cf5 "\cf4 $\{FRAMEWORK\}\cf5 /lib\cf4 $\{FRAMEWORK_NAME\}\cf5 .a"\cf4  | 
\f2\b \cf6 echo
\f1\b0 \cf4 \
\cf2 #ur workspace to insert its path.\
\
\
4. Select Universal target and generic device and build \
\
\
.a one folder will created at same place where .xcodeproj\
Folder name will be universal take .a file from there \
\
5. Take .a file and public .h file\
\
6. Check architectures by running command. You should on same path where .a file\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs28 \cf7 \cb8 \CocoaLigature0  xcrun -sdk iphoneos lipo -info libTestStaticLib.a
\f1\fs24 \cf2 \cb3 \CocoaLigature1 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf4 \
\
\
B. Add .a file and .h file in iOS project and access static library functionality \
\
FQA.\
\
1. Library may give error Architecture missing, Obj file missing etc. compile error\
May compile on simulator not on device \
May on device not on simulator\
\
Ans: Library is not created with correct architectures \
\
1. If you created library with correct architectures it will compile in iOS and xamarin \
\
If its not compiling in iOS device and simulator it not work xamarin\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \cb1 END \
\
/*==================================================================================*/\
\
\
\
/*==================================================================================*/\
\
Start\

\fs48 Xamarin static Library
\fs24 \
Wrap iOS .a fine and dependent .h file and framework in xamarin library \
\
1. Download visual studio \
2. File->New Solution->Binding Library-> Put Name and brower location \
3. Create one folder inside library folder-> iOSLib= paste .a file-> create header folder = paste header file\
\
Navigate on terminal to library folder\
\
4. Install sharpie latest version and install \
\
Run command see sharpie command info\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs28 \cf7 \cb8 \CocoaLigature0 sharpie xcode -help\
\
Chandrakants-MacBook-Pro:MessageTest chandrakant$ sharpie xcode -help\
usage: sharpie xcode [OPTIONS]\
\
Options:\
  -h, -help                 Show detailed help\
  -v, -verbose              Be verbose with output\
\
Xcode Options:\
  -x, -xcode XCODE_ROOT     Search only for SDKs within this specified Xcode paths. May be specified multiple times.\
      -sdks                 List all available Xcode SDKs. Pass -verbose for more details.\
      -sdkpath SDK          Output the path of the SDK\
      -frameworks SDK       List all available framework directories in a given SDK.\
Chandrakants-MacBook-Pro:MessageTest chandrakant$ \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb1 \CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs28 \cf7 \cb8 \CocoaLigature0 Chandrakants-MacBook-Pro:MessageTest chandrakant$ sharpie xcode -sdks\
sdk: appletvos13.2    arch: arm64   \
sdk: iphoneos13.2     arch: arm64   armv7   \
sdk: driverkit19.0    arch: x86_64  i386    \
sdk: macosx10.15      arch: x86_64  i386    \
sdk: watchos6.1       arch: armv7k  \
Chandrakants-MacBook-Pro:MessageTest chandrakant$  
\f0\fs24 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Get iOS available SDK\
4.  Add .a file as reference \
Right Click on project-> Add -> Add File-> Select .a file-> Move file\
It will create one lib name.a.linwith.cs \
\
Which have code like this. \
\
// WARNING: This feature is deprecated. Use the "Native References" folder instead.\
// Right-click on the "Native References" folder, select "Add Native Reference",\
// and then select the static library or framework that you'd like to bind.\
//\
// Once you've added your static library or framework, right-click the library or\
// framework and select "Properties" to change the LinkWith values.\
\
using ObjCRuntime;\
\
/*  LinkerFlags = "-lstdc++ -lz -ObjC" this additional part */\
\
[assembly: LinkWith("libTestStaticLib.a", SmartLink = true, LinkerFlags = "-lstdc++ -lz -ObjC")]\
\
5. Now we have bind .h files and depended frame work \
\
Run this command Here Binding library name is 
\f3\fs28 \cf7 \cb8 \CocoaLigature0 MessageTest
\f0\fs24 \cf0 \cb1 \CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs28 \cf7 \cb8 \CocoaLigature0 MessageTest chandrakant$ sharpie bind --output=MessageTest --namespace=MessageTest --sdk=iphoneos13.2 //Users/chandrakant/Desktop/XamarinR\\&D/MessageTest/MessageTest/iOSLib/header/*.h\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 This will create two file. Which have reference of our .h files and delegate reference \
ApiDefinitions.cs, StructsAndEnums.cs\
\
These file have unused which not not copy \
\
Only copies related to your .f file enum, structure and delegates\
In your file \
ApiDefinitions.cs, Structs.cs\
\
using System;\
using System.Runtime.InteropServices;\
using Foundation;\
using ObjCRuntime;\
\
\
Structs.cs ==============\
\
\
namespace MessageTest\
\{ \}\
\
\
\
ApiDefinitions.cs =========================\
\
using System;\
using CoreFoundation;\
using Foundation;\
using ObjCRuntime;\
using Security;\
\
namespace MessageTest\
\{\
    // @protocol DoSomthingClassDelegate <NSObject>\
    [Protocol, Model(AutoGeneratedName = true)]\
    [BaseType(typeof(NSObject))]\
    interface DoSomthingClassDelegate\
    \{\
        // @required -(void)callBackFromTestLib;\
        [Abstract]\
        [Export("callBackFromTestLib")]\
        void CallBackFromTestLib();\
    \}\
\
    // @interface DoSomthingClass : NSObject\
    [BaseType(typeof(NSObject))]\
    [Protocol]\
    interface DoSomthingClass\
    \{\
        [Wrap("WeakDelegate")]\
        DoSomthingClassDelegate Delegate \{ get; set; \}\
\
        // @property (nonatomic, weak) NSObject<DoSomthingClassDelegate> * delegate;\
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]\
        NSObject WeakDelegate \{ get; set; \}\
\
        // -(void)doSomthingNew:(NSString *)from;\
        [Export("doSomthingNew:")]\
        void DoSomthingNew(string from);\
    \}\
\}\
\
\
Compile library\
End\
\
/*==================================================================================*/\
\
\
\
\
/*==================================================================================*/\
\
Start\

\fs48 Add Xamarin Static Binding to Xamarin Project\
\

\fs24 Step 1:- \
\
1. Project- > References-> Edit References-> .Net Assembly -> Browser Library \
\
Bin- Simulator->debug-Native Library \
\
2. Import native library in class \
\
Like this \
\
using MessageTest;\
\
Class =============\
\
\
using Foundation;\
using System;\
using UIKit;\
using MessageTest;\
\
namespace TestXamariApp\
\{. \
\
 /* Put any name place of MessageTestCallBack * /\
   \
\
 public class MessageTestCallBack : DoSomthingClassDelegate\
    \{\
        public override void CallBackFromTestLib()\
        \{\
            Console.WriteLine("This first test call from IOS to xamarin");\
\
        \}\
\
    \}\
\
        public partial class ViewController : UIViewController\
    \{\
        DoSomthingClass doObj;\
\
        public ViewController(IntPtr handle) : base(handle)\
        \{\
        \}\
\
        public override void ViewDidLoad()\
        \{\
            base.ViewDidLoad();\
            doObj = new DoSomthingClass();\
        / * Create delegate reference * /\
   \
            var callback = new MessageTestCallBack();\
            doObj.Delegate = callback;\
            doObj.DoSomthingNew("Xamarin");\
            // Perform any additional setup after loading the view, typically from a nib.\
        \}\
\
        public override void DidReceiveMemoryWarning()\
        \{\
            base.DidReceiveMemoryWarning();\
            // Release any cached data, images, etc that aren't in use.\
        \}\
    \}\
\}\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf4 \cb3 \
\
Compile\
\
Check code\
\
End\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \cb1 /*==================================================================================*/\
\
\
\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf4 \cb3 Check framework architecture \

\f0 \cf0 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs28 \cf7 \cb8 \CocoaLigature0 lipo -info AhaRadioFramework.framework/AhaRadioFramework
\f1\fs24 \cf4 \cb3 \CocoaLigature1 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf4 \
}